8e1a4427ae7c4c276ad10db81425d2a6
"use strict";

/* istanbul ignore next */
function cov_2rgqx4bkvq() {
  var path = "/Users/splincode/Downloads/Develop/autowired/projects/autowired/src/lib/decorators/autowired.decorator.ts";
  var hash = "e91dc569db31ed93e3ce95dbb5f039bf49dfdc02";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/splincode/Downloads/Develop/autowired/projects/autowired/src/lib/decorators/autowired.decorator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 25
        },
        end: {
          line: 3,
          column: 59
        }
      },
      "2": {
        start: {
          line: 4,
          column: 38
        },
        end: {
          line: 4,
          column: 85
        }
      },
      "3": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 20,
          column: 6
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 81
        }
      },
      "5": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 26
        }
      },
      "6": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "7": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "8": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 18,
          column: 15
        }
      },
      "9": {
        start: {
          line: 16,
          column: 16
        },
        end: {
          line: 16,
          column: 86
        }
      },
      "10": {
        start: {
          line: 17,
          column: 16
        },
        end: {
          line: 17,
          column: 66
        }
      },
      "11": {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 22,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "Autowired",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 18
          }
        },
        loc: {
          start: {
            line: 5,
            column: 21
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 12
          }
        },
        loc: {
          start: {
            line: 6,
            column: 28
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 36
          }
        },
        loc: {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 18,
            column: 13
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        }, {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        }],
        line: 9
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e91dc569db31ed93e3ce95dbb5f039bf49dfdc02"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_2rgqx4bkvq = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_2rgqx4bkvq();
cov_2rgqx4bkvq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const inject_service_1 =
/* istanbul ignore next */
(cov_2rgqx4bkvq().s[1]++, require("../utils/inject-service"));
const ensure_injectable_type_meta_1 =
/* istanbul ignore next */
(cov_2rgqx4bkvq().s[2]++, require("../utils/ensure-injectable-type-meta"));

function Autowired() {
  /* istanbul ignore next */
  cov_2rgqx4bkvq().f[0]++;
  cov_2rgqx4bkvq().s[3]++;
  return (target, key) => {
    /* istanbul ignore next */
    cov_2rgqx4bkvq().f[1]++;
    let meta =
    /* istanbul ignore next */
    (cov_2rgqx4bkvq().s[4]++, ensure_injectable_type_meta_1.ensureInjectableTypeMeta(target));

    /* istanbul ignore next */
    cov_2rgqx4bkvq().s[5]++;
    console.log(meta);

    /* istanbul ignore next */
    cov_2rgqx4bkvq().s[6]++;

    if (meta) {
      /* istanbul ignore next */
      cov_2rgqx4bkvq().b[0][0]++;
      cov_2rgqx4bkvq().s[7]++;
      // Note: AOT
      inject_service_1.injectService(target, key, meta);
    } else {
      /* istanbul ignore next */
      cov_2rgqx4bkvq().b[0][1]++;
      cov_2rgqx4bkvq().s[8]++;
      Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_2rgqx4bkvq().f[2]++;
        cov_2rgqx4bkvq().s[9]++;
        // Note: JIT
        meta = ensure_injectable_type_meta_1.ensureInjectableTypeMeta(target);

        /* istanbul ignore next */
        cov_2rgqx4bkvq().s[10]++;
        inject_service_1.injectService(target, key, meta);
      });
    }
  };
}

/* istanbul ignore next */
cov_2rgqx4bkvq().s[11]++;
exports.Autowired = Autowired;