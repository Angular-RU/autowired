9c49f787595f499269ff7858e140b0ff
"use strict";

/* istanbul ignore next */
function cov_2fgijg7zon() {
  var path = "/Users/splincode/Downloads/Develop/autowired/projects/autowired/src/lib/utils/get-reflect-type.ts";
  var hash = "5f2628e4a04939b442530ce7af7c618136c50019";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/splincode/Downloads/Develop/autowired/projects/autowired/src/lib/utils/get-reflect-type.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 6,
          column: 5
        }
      },
      "2": {
        start: {
          line: 5,
          column: 8
        },
        end: {
          line: 5,
          column: 87
        }
      },
      "3": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 67
        }
      },
      "4": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "getReflectType",
        decl: {
          start: {
            line: 3,
            column: 9
          },
          end: {
            line: 3,
            column: 23
          }
        },
        loc: {
          start: {
            line: 3,
            column: 45
          },
          end: {
            line: 8,
            column: 1
          }
        },
        line: 3
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        }, {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        }],
        line: 4
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5f2628e4a04939b442530ce7af7c618136c50019"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_2fgijg7zon = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_2fgijg7zon();
cov_2fgijg7zon().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

function getReflectType(target, propertyKey) {
  /* istanbul ignore next */
  cov_2fgijg7zon().f[0]++;
  cov_2fgijg7zon().s[1]++;

  if (!Reflect.getMetadata) {
    /* istanbul ignore next */
    cov_2fgijg7zon().b[0][0]++;
    cov_2fgijg7zon().s[2]++;
    throw new Error(`You forgot add "import 'reflect-metadata';" to polyfills.ts`);
  } else
  /* istanbul ignore next */
  {
    cov_2fgijg7zon().b[0][1]++;
  }

  cov_2fgijg7zon().s[3]++;
  return Reflect.getMetadata('design:type', target, propertyKey);
}

/* istanbul ignore next */
cov_2fgijg7zon().s[4]++;
exports.getReflectType = getReflectType;