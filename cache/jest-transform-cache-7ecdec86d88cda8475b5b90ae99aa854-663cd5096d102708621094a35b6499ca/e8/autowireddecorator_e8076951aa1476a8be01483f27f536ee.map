{"file":"/Users/splincode/Downloads/Develop/autowired/projects/autowired/src/lib/decorators/autowired.decorator.ts","mappings":";;AACA,4DAAwD;AACxD,sFAAgF;AAEhF,SAAgB,SAAS;IACvB,OAAO,CAAC,MAAc,EAAE,GAAQ,EAAE,EAAE;QAClC,IAAI,IAAI,GAAsB,sDAAwB,CAAC,MAAM,CAAC,CAAC;QAE/D,IAAI,IAAI,EAAE;YACR,YAAY;YACZ,8BAAa,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;SAClC;aAAM;YACL,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;gBAC1B,YAAY;gBACZ,IAAI,GAAG,sDAAwB,CAAC,MAAM,CAAC,CAAC;gBACxC,8BAAa,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC;AACJ,CAAC;AAfD,8BAeC","names":[],"sources":["/Users/splincode/Downloads/Develop/autowired/projects/autowired/src/lib/decorators/autowired.decorator.ts"],"sourcesContent":["import { InjectableMeta, Key } from '../interfaces/internals';\nimport { injectService } from '../utils/inject-service';\nimport { ensureInjectableTypeMeta } from '../utils/ensure-injectable-type-meta';\n\nexport function Autowired<T = any>(): PropertyDecorator {\n  return (target: Object, key: Key) => {\n    let meta: InjectableMeta<T> = ensureInjectableTypeMeta(target);\n\n    if (meta) {\n      // Note: AOT\n      injectService(target, key, meta);\n    } else {\n      Promise.resolve().then(() => {\n        // Note: JIT\n        meta = ensureInjectableTypeMeta(target);\n        injectService(target, key, meta);\n      });\n    }\n  };\n}\n"],"version":3}