81c5f17f415b283bb266015a2e59dc15
"use strict";

/* istanbul ignore next */
function cov_1x6fm2tprx() {
  var path = "/Users/splincode/Downloads/Develop/autowired/projects/autowired/src/lib/utils/inject-token.ts";
  var hash = "5cc9ff107817cd254118921ae5d2483ad9aa0885";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/splincode/Downloads/Develop/autowired/projects/autowired/src/lib/utils/inject-token.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 15
        },
        end: {
          line: 3,
          column: 39
        }
      },
      "2": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 31
        }
      },
      "3": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "4": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 24,
          column: 7
        }
      },
      "5": {
        start: {
          line: 17,
          column: 16
        },
        end: {
          line: 19,
          column: 17
        }
      },
      "6": {
        start: {
          line: 18,
          column: 20
        },
        end: {
          line: 18,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 61
        }
      },
      "8": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 34
        }
      },
      "9": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 26,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "injectToken",
        decl: {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 20
          }
        },
        loc: {
          start: {
            line: 4,
            column: 41
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 16,
            column: 13
          }
        },
        loc: {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 22,
            column: 13
          }
        },
        line: 16
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 19,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 19,
            column: 17
          }
        }, {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 19,
            column: 17
          }
        }],
        line: 17
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5cc9ff107817cd254118921ae5d2483ad9aa0885"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_1x6fm2tprx = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_1x6fm2tprx();
cov_1x6fm2tprx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const core_1 =
/* istanbul ignore next */
(cov_1x6fm2tprx().s[1]++, require("@angular/core"));

function injectToken(target, key, token) {
  /* istanbul ignore next */
  cov_1x6fm2tprx().f[0]++;
  const name =
  /* istanbul ignore next */
  (cov_1x6fm2tprx().s[2]++, key.toString());
  const hash =
  /* istanbul ignore next */
  (cov_1x6fm2tprx().s[3]++, `#_${name}_token`);

  /* istanbul ignore next */
  cov_1x6fm2tprx().s[4]++;
  Object.defineProperties(target, {
    [hash]: {
      writable: true,
      enumerable: false,
      configurable: true
    },
    [name]: {
      enumerable: true,
      configurable: true,

      get() {
        /* istanbul ignore next */
        cov_1x6fm2tprx().f[1]++;
        cov_1x6fm2tprx().s[5]++;

        if (this[hash]) {
          /* istanbul ignore next */
          cov_1x6fm2tprx().b[0][0]++;
          cov_1x6fm2tprx().s[6]++;
          return this[hash];
        } else
        /* istanbul ignore next */
        {
          cov_1x6fm2tprx().b[0][1]++;
        }

        cov_1x6fm2tprx().s[7]++;
        this[hash] = core_1.ɵɵdirectiveInject(token);

        /* istanbul ignore next */
        cov_1x6fm2tprx().s[8]++;
        return this[hash];
      }

    }
  });
}

/* istanbul ignore next */
cov_1x6fm2tprx().s[9]++;
exports.injectToken = injectToken;