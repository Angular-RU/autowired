c6af2f3d67ab58616bbfeb43a1c57135
"use strict";

/* istanbul ignore next */
function cov_1u345s6kry() {
  var path = "/Users/splincode/Downloads/Develop/autowired/projects/autowired/src/lib/utils/inject-service.ts";
  var hash = "9c5816a6c7e7313fdef82a2336f934f3839a1b16";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/splincode/Downloads/Develop/autowired/projects/autowired/src/lib/utils/inject-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 15
        },
        end: {
          line: 3,
          column: 39
        }
      },
      "2": {
        start: {
          line: 4,
          column: 27
        },
        end: {
          line: 4,
          column: 56
        }
      },
      "3": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "4": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 41
        }
      },
      "5": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 9,
          column: 67
        }
      },
      "6": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 18,
          column: 5
        }
      },
      "7": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 17,
          column: 10
        }
      },
      "9": {
        start: {
          line: 13,
          column: 29
        },
        end: {
          line: 13,
          column: 56
        }
      },
      "10": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 70
        }
      },
      "11": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 35
        }
      },
      "12": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 28
        }
      },
      "13": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 47,
          column: 7
        }
      },
      "14": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 31,
          column: 17
        }
      },
      "15": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 30,
          column: 42
        }
      },
      "16": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 43,
          column: 17
        }
      },
      "17": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 36,
          column: 21
        }
      },
      "18": {
        start: {
          line: 35,
          column: 24
        },
        end: {
          line: 35,
          column: 68
        }
      },
      "19": {
        start: {
          line: 37,
          column: 20
        },
        end: {
          line: 37,
          column: 65
        }
      },
      "20": {
        start: {
          line: 40,
          column: 20
        },
        end: {
          line: 40,
          column: 48
        }
      },
      "21": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 42,
          column: 35
        }
      },
      "22": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 38
        }
      },
      "23": {
        start: {
          line: 49,
          column: 0
        },
        end: {
          line: 49,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "injectService",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 22
          }
        },
        loc: {
          start: {
            line: 5,
            column: 42
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 12,
            column: 21
          }
        },
        loc: {
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 17,
            column: 9
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        },
        loc: {
          start: {
            line: 28,
            column: 18
          },
          end: {
            line: 45,
            column: 13
          }
        },
        line: 28
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        }, {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 10,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 10,
            column: 12
          }
        }, {
          start: {
            line: 10,
            column: 16
          },
          end: {
            line: 10,
            column: 25
          }
        }],
        line: 10
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 31,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 31,
            column: 17
          }
        }, {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 31,
            column: 17
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 20
          },
          end: {
            line: 36,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 20
          },
          end: {
            line: 36,
            column: 21
          }
        }, {
          start: {
            line: 33,
            column: 20
          },
          end: {
            line: 36,
            column: 21
          }
        }],
        line: 33
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9c5816a6c7e7313fdef82a2336f934f3839a1b16"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_1u345s6kry = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_1u345s6kry();
cov_1u345s6kry().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const core_1 =
/* istanbul ignore next */
(cov_1u345s6kry().s[1]++, require("@angular/core"));
const get_reflect_type_1 =
/* istanbul ignore next */
(cov_1u345s6kry().s[2]++, require("./get-reflect-type"));

function injectService(target, key, meta) {
  /* istanbul ignore next */
  cov_1u345s6kry().f[0]++;
  let localInjector;
  const name =
  /* istanbul ignore next */
  (cov_1u345s6kry().s[3]++, key.toString());
  const cachedId =
  /* istanbul ignore next */
  (cov_1u345s6kry().s[4]++, `#_${name}__service`);
  const classRef =
  /* istanbul ignore next */
  (cov_1u345s6kry().s[5]++, get_reflect_type_1.getReflectType(target, key));

  /* istanbul ignore next */
  cov_1u345s6kry().s[6]++;

  if (
  /* istanbul ignore next */
  (cov_1u345s6kry().b[1][0]++, meta) &&
  /* istanbul ignore next */
  (cov_1u345s6kry().b[1][1]++, meta.ɵfac)) {
    /* istanbul ignore next */
    cov_1u345s6kry().b[0][0]++;
    const factory =
    /* istanbul ignore next */
    (cov_1u345s6kry().s[7]++, meta.ɵfac);

    /* istanbul ignore next */
    cov_1u345s6kry().s[8]++;

    meta.ɵfac = () => {
      /* istanbul ignore next */
      cov_1u345s6kry().f[1]++;
      const instance =
      /* istanbul ignore next */
      (cov_1u345s6kry().s[9]++, factory(target.constructor));

      /* istanbul ignore next */
      cov_1u345s6kry().s[10]++;
      localInjector = core_1.ɵɵdirectiveInject(core_1.INJECTOR);

      /* istanbul ignore next */
      cov_1u345s6kry().s[11]++;
      console.log('created');

      /* istanbul ignore next */
      cov_1u345s6kry().s[12]++;
      return instance;
    };
  } else
  /* istanbul ignore next */
  {
    cov_1u345s6kry().b[0][1]++;
  }

  cov_1u345s6kry().s[13]++;
  Object.defineProperties(target, {
    [cachedId]: {
      writable: true,
      enumerable: false,
      configurable: true
    },
    [name]: {
      enumerable: true,
      configurable: true,

      get() {
        /* istanbul ignore next */
        cov_1u345s6kry().f[2]++;
        cov_1u345s6kry().s[14]++;

        if (this[cachedId]) {
          /* istanbul ignore next */
          cov_1u345s6kry().b[2][0]++;
          cov_1u345s6kry().s[15]++;
          return this[cachedId];
        } else
        /* istanbul ignore next */
        {
          cov_1u345s6kry().b[2][1]++;
        }

        cov_1u345s6kry().s[16]++;

        try {
          /* istanbul ignore next */
          cov_1u345s6kry().s[17]++;

          if (!localInjector) {
            /* istanbul ignore next */
            cov_1u345s6kry().b[3][0]++;
            cov_1u345s6kry().s[18]++;
            // localInjector = directiveInject(INJECTOR) || createInjector(INJECTOR);
            console.log('localInjector', localInjector);
          } else
          /* istanbul ignore next */
          {
            cov_1u345s6kry().b[3][1]++;
          }

          cov_1u345s6kry().s[19]++;
          this[cachedId] = localInjector.get(classRef);
        } catch (e) {
          /* istanbul ignore next */
          cov_1u345s6kry().s[20]++;
          console.log('e', e.message); //this[cachedId] = directiveInject<T>(classRef);

          /* istanbul ignore next */
          cov_1u345s6kry().s[21]++;
          console.log(2);
        }

        /* istanbul ignore next */
        cov_1u345s6kry().s[22]++;
        return this[cachedId];
      }

    }
  });
}

/* istanbul ignore next */
cov_1u345s6kry().s[23]++;
exports.injectService = injectService;