{"file":"/Users/splincode/Downloads/Develop/autowired/projects/autowired/src/lib/utils/inject-service.ts","mappings":";;AAAA,wCAA+F;AAG/F,yDAAoD;AAEpD,SAAgB,aAAa,CAAI,MAAc,EAAE,GAAQ,EAAE,IAAuB;IAChF,IAAI,aAAuB,CAAC;IAC5B,MAAM,IAAI,GAAW,GAAG,CAAC,QAAQ,EAAE,CAAC;IACpC,MAAM,QAAQ,GAAW,KAAK,IAAI,WAAW,CAAC;IAC9C,MAAM,QAAQ,GAAgB,iCAAc,CAAI,MAAM,EAAE,GAAG,CAAC,CAAC;IAE7D,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;QACrB,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QAE1B,IAAI,CAAC,IAAI,GAAG,GAAG,EAAE;YACf,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,WAAkB,CAAC,CAAC;YACpD,aAAa,GAAG,wBAAe,CAAC,eAAQ,CAAC,CAAC;YAC1C,UAAU,CAAC,GAAG,EAAE;gBACd,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;YACrB,CAAC,EAAE,IAAI,CAAC,CAAA;YACR,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACvB,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC;KACH;IAED,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE;QAC9B,CAAC,QAAQ,CAAC,EAAE;YACV,QAAQ,EAAE,IAAI;YACd,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,IAAI;SACnB;QACD,CAAC,IAAI,CAAC,EAAE;YACN,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;YAClB,GAAG;gBACD,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;oBAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACvB;gBAED,IAAI;oBACF,IAAI,CAAC,aAAa,EAAE;wBAClB,yEAAyE;wBACzE,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;qBAC7C;oBAED,IAAI,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC,GAAG,CAAI,QAAQ,CAAC,CAAC;iBACjD;gBAAC,OAAO,CAAC,EAAE;oBACV,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;oBAC5B,gDAAgD;oBAChD,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAChB;gBAED,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,CAAC;SACF;KACF,CAAC,CAAC;AACL,CAAC;AAnDD,sCAmDC","names":[],"sources":["/Users/splincode/Downloads/Develop/autowired/projects/autowired/src/lib/utils/inject-service.ts"],"sourcesContent":["import { INJECTOR, Injector, Type, ɵɵdirectiveInject as directiveInject } from '@angular/core';\nimport { ɵcreateInjector as createInjector } from '@angular/core';\nimport { ClassRef, InjectableMeta, Key } from '../interfaces/internals';\nimport { getReflectType } from './get-reflect-type';\n\nexport function injectService<T>(target: Object, key: Key, meta: InjectableMeta<T>): void {\n  let localInjector: Injector;\n  const name: string = key.toString();\n  const cachedId: string = `#_${name}__service`;\n  const classRef: ClassRef<T> = getReflectType<T>(target, key);\n\n  if (meta && meta.ɵfac) {\n    const factory = meta.ɵfac;\n\n    meta.ɵfac = () => {\n      const instance = factory(target.constructor as any);\n      localInjector = directiveInject(INJECTOR);\n      setTimeout(() => {\n        console.log('fuck')\n      }, 3000)\n      console.log('created');\n      return instance;\n    };\n  }\n\n  Object.defineProperties(target, {\n    [cachedId]: {\n      writable: true,\n      enumerable: false,\n      configurable: true\n    },\n    [name]: {\n      enumerable: true,\n      configurable: true,\n      get(): Type<T> {\n        if (this[cachedId]) {\n          return this[cachedId];\n        }\n\n        try {\n          if (!localInjector) {\n            // localInjector = directiveInject(INJECTOR) || createInjector(INJECTOR);\n            console.log('localInjector', localInjector);\n          }\n\n          this[cachedId] = localInjector.get<T>(classRef);\n        } catch (e) {\n          console.log('e', e.message);\n          //this[cachedId] = directiveInject<T>(classRef);\n          console.log(2);\n        }\n\n        return this[cachedId];\n      }\n    }\n  });\n}\n"],"version":3}